(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{1164:function(t,v,_){"use strict";_.r(v);var e=_(15),l=Object(e.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("常用字典数据结构如下所示")]),t._v(" "),e("p",[e("img",{attrs:{src:_(708),alt:""}})]),t._v(" "),e("p",[t._v("字典树又称单词查找树， Trie 树，是一种树形结构，是一种哈希树的变种")]),t._v(" "),e("p",[t._v("典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），经常被搜索引擎系统用于文本词频统计")]),t._v(" "),e("p",[t._v("优点")]),t._v(" "),e("ul",[e("li",[t._v("利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较")]),t._v(" "),e("li",[t._v("查询效率比哈希树高")])]),t._v(" "),e("p",[t._v("Trie 的核心思想是空间换时间，利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的")]),t._v(" "),e("p",[t._v("基本性质")]),t._v(" "),e("ul",[e("li",[t._v("根节点不包含字符，除根节点外每一个节点都只包含一个字符")]),t._v(" "),e("li",[t._v("从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串")]),t._v(" "),e("li",[t._v("每个节点的所有子节点包含的字符都不相同")])]),t._v(" "),e("p",[t._v("对于中文的字典树，每个节点的"),e("strong",[t._v("子节点用一个哈希表存储")]),t._v("，这样就不用浪费太大的空间，而且查询速度上可以保留哈希的复杂度 O(1)")])])}),[],!1,null,null,null);v.default=l.exports},708:function(t,v,_){t.exports=_.p+"assets/img/trie.cb16f744.png"}}]);